{"version":3,"file":"chart.cjs","sources":["../src/core/core.animator.js","../src/core/core.animation.js","../src/core/core.animations.js","../src/core/core.datasetController.js","../src/controllers/controller.bar.js","../src/controllers/controller.bubble.js","../src/controllers/controller.doughnut.js","../src/controllers/controller.line.js","../src/controllers/controller.polarArea.js","../src/controllers/controller.pie.js","../src/controllers/controller.radar.js","../src/controllers/controller.scatter.js","../src/core/core.adapters.ts","../src/core/core.interaction.js","../src/core/core.layouts.js","../src/platform/platform.base.js","../src/platform/platform.basic.js","../src/platform/platform.dom.js","../src/platform/index.js","../src/core/core.element.ts","../src/core/core.scale.autoskip.js","../src/core/core.scale.js","../src/core/core.typedRegistry.js","../src/core/core.registry.js","../src/core/core.plugins.js","../src/core/core.config.js","../src/core/core.controller.js","../src/elements/element.arc.ts","../src/elements/element.line.js","../src/elements/element.point.ts","../src/elements/element.bar.js","../src/plugins/plugin.colors.ts","../src/plugins/plugin.decimation.js","../src/plugins/plugin.filler/filler.segment.js","../src/plugins/plugin.filler/filler.helper.js","../src/plugins/plugin.filler/filler.options.js","../src/plugins/plugin.filler/filler.target.stack.js","../src/plugins/plugin.filler/simpleArc.js","../src/plugins/plugin.filler/filler.target.js","../src/plugins/plugin.filler/filler.drawing.js","../src/plugins/plugin.filler/index.js","../src/plugins/plugin.legend.js","../src/plugins/plugin.title.js","../src/plugins/plugin.subtitle.js","../src/plugins/plugin.tooltip.js","../src/scales/scale.category.js","../src/scales/scale.linearbase.js","../src/scales/scale.linear.js","../src/scales/scale.logarithmic.js","../src/scales/scale.radialLinear.js","../src/scales/scale.time.js","../src/scales/scale.timeseries.js","../src/index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\n\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (and thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal metadata accordingly.\n\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash'),\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      // https://github.com/chartjs/Chart.js/issues/11333\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      // https://github.com/chartjs/Chart.js/issues/11333\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<string, string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<string, string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('../types/index.js').Chart } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  /** @type {CanvasTextAlign} */\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = /** @type {string} */ (label[j]);\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        case 'inner':\n          if (i === ilen - 1) {\n            left -= width;\n          } else if (i > 0) {\n            left -= width / 2;\n          }\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis\n      || axisFromPosition(opts.position)\n      || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {axis};\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).some((key) => isFunction(value[key]));\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getSizeForArea(scale, chartArea, field) {\n  return scale.options.clip ? scale[field] : chartArea[field];\n}\n\nfunction getDatasetArea(meta, chartArea) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: getSizeForArea(xScale, chartArea, 'left'),\n      right: getSizeForArea(xScale, chartArea, 'right'),\n      top: getSizeForArea(yScale, chartArea, 'top'),\n      bottom: getSizeForArea(yScale, chartArea, 'bottom')\n    };\n  }\n  return chartArea;\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta, this.chartArea);\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the envent inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle, borderDash, borderDashOffset} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @returns {any}\n */\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || (elements && containsColorsDefinitions(elements)))) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : (labelColor.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      // But make sure that active elements are still valid.\n      return lastActive.filter(i =>\n        this.chart.data.datasets[i.datasetIndex] &&\n        this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined\n      );\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({value: tickValue});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {extra, additionalAngle, padding, size} = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    // if to draw or overlapped\n    visible: true,\n\n    // Text position\n    x: pointLabelPosition.x,\n    y,\n\n    // Text rendering data\n    textAlign,\n\n    // Bounding box\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {left, top, right, bottom} = item;\n  const apexesInArea = _isPointInArea({x: left, y: top}, area) || _isPointInArea({x: left, y: bottom}, area) ||\n    _isPointInArea({x: right, y: top}, area) || _isPointInArea({x: right, y: bottom}, area);\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {centerPointLabels, display} = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {left, top, right, bottom} = item;\n  const {backdropColor} = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius,\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      // overlapping\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign} = item;\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || (index === 0 && this.min < 0)) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if ((index === 0 && this.min >= 0) && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if it's not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @protected\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guesstimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n    * Generates all timestamps defined in the data.\n    * Important: this method can return ticks outside the min and max range, it's the\n    * responsibility of the calling code to clamp values if needed.\n    * @protected\n    */\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"],"names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","transparent","interpolators","boolean","from","to","factor","color","c0","helpersColor","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","animator","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","isFinite","sign","convertObjectDataToArray","data","adata","Array","isStacked","meta","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","grouped","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","iAxisKey","vAxisKey","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","skipNull","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","animateRotate","animateScale","spacing","descriptors","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","e","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","formatNumber","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","segment","animated","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","merge","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","callCallback","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","d","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getSizeForArea","field","getDatasetArea","Chart","version","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","Interaction","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","forceOverride","_args","chartOptions","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","_element","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","WeakMap","positioners","average","xSet","xAverage","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","tickValue","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","minExp","exp","significand","lastTick","LogarithmicScale","logarithmic","_zero","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","adapters","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"mappings":"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"}